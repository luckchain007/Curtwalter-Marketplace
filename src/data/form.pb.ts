// Code generated by protoc-gen-js-fetch.
// DO NOT EDIT!

import * as google_protobuf_google_protobuf_timestamp from "./google/protobuf/timestamp.pb";
import * as google_protobuf_google_protobuf_field_mask from "./google/protobuf/field_mask.pb";

export type AcceptStatus = "WAITING" | "REJECTED" | "ACCEPTED";
export const AcceptStatus_WAITING: AcceptStatus = "WAITING";
export const AcceptStatus_REJECTED: AcceptStatus = "REJECTED";
export const AcceptStatus_ACCEPTED: AcceptStatus = "ACCEPTED";

export const ALL_AcceptStatus_VALUES: AcceptStatus[] = [
  AcceptStatus_WAITING,
  AcceptStatus_REJECTED,
  AcceptStatus_ACCEPTED,
];

export type ListingAppOrderBy =
  | "ADDED_NEW_TO_OLD"
  | "ADDED_OLD_TO_NEW"
  | "MINTED_NEW_TO_OLD"
  | "MINTED_OLD_TO_NEW"
  | "TOTAL_ITEMS_LOW_TO_HIGH"
  | "TOTAL_ITEMS_HIGH_TO_LOW";
export const ListingAppOrderBy_ADDED_NEW_TO_OLD: ListingAppOrderBy =
  "ADDED_NEW_TO_OLD";
export const ListingAppOrderBy_ADDED_OLD_TO_NEW: ListingAppOrderBy =
  "ADDED_OLD_TO_NEW";
export const ListingAppOrderBy_MINTED_NEW_TO_OLD: ListingAppOrderBy =
  "MINTED_NEW_TO_OLD";
export const ListingAppOrderBy_MINTED_OLD_TO_NEW: ListingAppOrderBy =
  "MINTED_OLD_TO_NEW";
export const ListingAppOrderBy_TOTAL_ITEMS_LOW_TO_HIGH: ListingAppOrderBy =
  "TOTAL_ITEMS_LOW_TO_HIGH";
export const ListingAppOrderBy_TOTAL_ITEMS_HIGH_TO_LOW: ListingAppOrderBy =
  "TOTAL_ITEMS_HIGH_TO_LOW";

export const ALL_ListingAppOrderBy_VALUES: ListingAppOrderBy[] = [
  ListingAppOrderBy_ADDED_NEW_TO_OLD,
  ListingAppOrderBy_ADDED_OLD_TO_NEW,
  ListingAppOrderBy_MINTED_NEW_TO_OLD,
  ListingAppOrderBy_MINTED_OLD_TO_NEW,
  ListingAppOrderBy_TOTAL_ITEMS_LOW_TO_HIGH,
  ListingAppOrderBy_TOTAL_ITEMS_HIGH_TO_LOW,
];

export type ListingAppTimeType =
  | "ADDED_AT_BEFORE"
  | "ADDED_AT_AFTER"
  | "MINT_BEFORE"
  | "MINT_AFTER";
export const ListingAppTimeType_ADDED_AT_BEFORE: ListingAppTimeType =
  "ADDED_AT_BEFORE";
export const ListingAppTimeType_ADDED_AT_AFTER: ListingAppTimeType =
  "ADDED_AT_AFTER";
export const ListingAppTimeType_MINT_BEFORE: ListingAppTimeType = "MINT_BEFORE";
export const ListingAppTimeType_MINT_AFTER: ListingAppTimeType = "MINT_AFTER";

export const ALL_ListingAppTimeType_VALUES: ListingAppTimeType[] = [
  ListingAppTimeType_ADDED_AT_BEFORE,
  ListingAppTimeType_ADDED_AT_AFTER,
  ListingAppTimeType_MINT_BEFORE,
  ListingAppTimeType_MINT_AFTER,
];

export interface ListingApp {
  /**
unique id
*/
  id?: string;
  /**
public key of application submitter
TODO: only admin can update
*/
  ownerPubkey?: string;
  /**
whether the project is reached by us or not
TODO: only admin can update
*/
  reached?: boolean;
  /**
title of collection
*/
  name?: string;
  /**
email address for contact
*/
  email?: string;
  /**
project twitter url
*/
  twitter?: string;
  /**
discord server invite link
*/
  discordInvite?: string;
  /**
discord id (nickname) for contact
*/
  discordId?: string;
  /**
short description of the project (for the collection page)
*/
  description?: string;
  /**
creator or Artist Name
*/
  artist?: string;
  /**
project website, instagram etc
*/
  otherLinks?: string[];
  /**
is collection already minted (false if partially minted)
*/
  minted?: boolean;
  /**
candy machine ids
*/
  candyIds?: string[];
  /**
the image that is shown on collection profile page (500x500)
*/
  pfp?: string;
  /**
"upcoming launches" (400x300)
*/
  featuredImage?: string;
  /**
banner image (1600x600)
*/
  banner?: string;
  /**
number of items in collection (existing or expected)
*/
  totalItems?: number;
  /**
anything else
*/
  other?: string;
  /**
whether the application is accepted or not
*/
  accepted?: boolean;
  /**
submission date
*/
  addedAt?: google_protobuf_google_protobuf_timestamp.Timestamp;
  /**
accept date, null if not accepted yet or rejected
*/
  acceptedAt?: google_protobuf_google_protobuf_timestamp.Timestamp;
  /**
mint date, null if not minted or partially minted
*/
  mintTime?: google_protobuf_google_protobuf_timestamp.Timestamp;
  /**
whether featured on the platform
*/
  featured?: boolean;
  /**
start of feature
*/
  featureFrom?: google_protobuf_google_protobuf_timestamp.Timestamp;
  /**
end of feature
*/
  featureUntil?: google_protobuf_google_protobuf_timestamp.Timestamp;
  acceptStatus?: AcceptStatus;
}

export const ListingApp_id = "id";
export const ListingApp_ownerPubkey = "owner_pubkey";
export const ListingApp_reached = "reached";
export const ListingApp_name = "name";
export const ListingApp_email = "email";
export const ListingApp_twitter = "twitter";
export const ListingApp_discordInvite = "discord_invite";
export const ListingApp_discordId = "discord_id";
export const ListingApp_description = "description";
export const ListingApp_artist = "artist";
export const ListingApp_otherLinks = "other_links";
export const ListingApp_minted = "minted";
export const ListingApp_candyIds = "candy_ids";
export const ListingApp_pfp = "pfp";
export const ListingApp_featuredImage = "featured_image";
export const ListingApp_banner = "banner";
export const ListingApp_totalItems = "total_items";
export const ListingApp_other = "other";
export const ListingApp_accepted = "accepted";
export const ListingApp_addedAt = "added_at";
export const ListingApp_acceptedAt = "accepted_at";
export const ListingApp_mintTime = "mint_time";
export const ListingApp_featured = "featured";
export const ListingApp_featureFrom = "feature_from";
export const ListingApp_featureUntil = "feature_until";
export const ListingApp_acceptStatus = "accept_status";
export interface ListingAppList {
  listingapps?: ListingApp[];
}

export const ListingAppList_listingapps = "listingapps";
export interface GetListingAppReq {
  id?: string;
}

export const GetListingAppReq_id = "id";
export interface AddListingAppRes {
  id?: string;
}

export const AddListingAppRes_id = "id";
export interface UpdateListingAppReq {
  fields?: google_protobuf_google_protobuf_field_mask.FieldMask;
  listingapp?: ListingApp;
}

export const UpdateListingAppReq_fields = "fields";
export const UpdateListingAppReq_listingapp = "listingapp";
export interface Featured {
  id?: string;
  featuredImage?: string;
  name?: string;
  description?: string;
  minted?: boolean;
  pfp?: string;
  mintTime?: google_protobuf_google_protobuf_timestamp.Timestamp;
  links?: string[];
}

export const Featured_id = "id";
export const Featured_featuredImage = "featured_image";
export const Featured_name = "name";
export const Featured_description = "description";
export const Featured_minted = "minted";
export const Featured_pfp = "pfp";
export const Featured_mintTime = "mint_time";
export const Featured_links = "links";
export interface FeaturedReq {}

export interface FeaturedRes {
  featuredList?: Featured[];
}

export const FeaturedRes_featuredList = "featured_list";
export interface ListingAppMatch {
  ownerPubkey?: string;
  name?: string;
  reached?: boolean;
  /**
filter by multiple status
*/
  acceptStatus?: AcceptStatus[];
  minted?: boolean;
  /**
select from before or after + added_at or mint_time
not included in match_fields, time.time == nil if empty
*/
  time?: ListingAppSelectTime;
  /**
backwards compat. reasons
*/
  accepted?: boolean;
}

export const ListingAppMatch_ownerPubkey = "owner_pubkey";
export const ListingAppMatch_name = "name";
export const ListingAppMatch_reached = "reached";
export const ListingAppMatch_acceptStatus = "accept_status";
export const ListingAppMatch_minted = "minted";
export const ListingAppMatch_time = "time";
export const ListingAppMatch_accepted = "accepted";
/**
select via added_at or mint_time
*/
export interface ListingAppSelectTime {
  type?: ListingAppTimeType;
  time?: google_protobuf_google_protobuf_timestamp.Timestamp;
}

export const ListingAppSelectTime_type = "type";
export const ListingAppSelectTime_time = "time";
export interface FilterListingAppReq {
  orderBy?: ListingAppOrderBy;
  matchFields?: google_protobuf_google_protobuf_field_mask.FieldMask;
  matchValues?: ListingAppMatch;
  limit?: number;
  offset?: number;
}

export const FilterListingAppReq_orderBy = "order_by";
export const FilterListingAppReq_matchFields = "match_fields";
export const FilterListingAppReq_matchValues = "match_values";
export const FilterListingAppReq_limit = "limit";
export const FilterListingAppReq_offset = "offset";
export interface ListListingAppReq {}

export interface ProfileIdCard {
  id: number;
  profileImage: string;
  name: string;
  linkToProfile: string;
  numberOfSales: number;
  verified: boolean;
}
