/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MarketplaceV2 {
  export type NftStruct = {
    owner: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type NftStructOutput = [string, BigNumber, BigNumber] & {
    owner: string;
    tokenId: BigNumber;
    price: BigNumber;
  };

  export type NftCollectionStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    author: PromiseOrValue<string>;
    nftContractAddr: PromiseOrValue<string>;
    nftsInCollection: MarketplaceV2.NftStruct[];
  };

  export type NftCollectionStructOutput = [
    string,
    string,
    string,
    string,
    string,
    MarketplaceV2.NftStructOutput[]
  ] & {
    name: string;
    symbol: string;
    description: string;
    author: string;
    nftContractAddr: string;
    nftsInCollection: MarketplaceV2.NftStructOutput[];
  };

  export type AuctionStruct = {
    author: PromiseOrValue<string>;
    nftContractAddr: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    highestBidder: PromiseOrValue<string>;
    highestBid: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type AuctionStructOutput = [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    author: string;
    nftContractAddr: string;
    tokenId: BigNumber;
    highestBidder: string;
    highestBid: BigNumber;
    endTime: BigNumber;
    isActive: boolean;
  };

  export type SaleStruct = {
    author: PromiseOrValue<string>;
    nftContractAddr: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type SaleStructOutput = [string, string, BigNumber, BigNumber] & {
    author: string;
    nftContractAddr: string;
    tokenId: BigNumber;
    price: BigNumber;
  };
}

export interface MarketplaceV2Interface extends utils.Interface {
  functions: {
    "auctionBid(uint256)": FunctionFragment;
    "auctionCount()": FunctionFragment;
    "auctionResolve(uint256)": FunctionFragment;
    "buySale(uint256)": FunctionFragment;
    "cancelSale(uint256)": FunctionFragment;
    "createAuction(address,uint256,uint256,uint256)": FunctionFragment;
    "createNftContract(string,string,string)": FunctionFragment;
    "createSale(address,uint256,uint256)": FunctionFragment;
    "getAllNftCollections()": FunctionFragment;
    "getAuctionById(uint256)": FunctionFragment;
    "getNftCollectionsWhereTokensOnSale()": FunctionFragment;
    "getNftsCollectionsAuthored()": FunctionFragment;
    "getNftsCollectionsWhereOwnerOwnsTokens()": FunctionFragment;
    "getSaleById(uint256)": FunctionFragment;
    "nftContractImplementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "saleCount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionBid"
      | "auctionCount"
      | "auctionResolve"
      | "buySale"
      | "cancelSale"
      | "createAuction"
      | "createNftContract"
      | "createSale"
      | "getAllNftCollections"
      | "getAuctionById"
      | "getNftCollectionsWhereTokensOnSale"
      | "getNftsCollectionsAuthored"
      | "getNftsCollectionsWhereOwnerOwnsTokens"
      | "getSaleById"
      | "nftContractImplementation"
      | "owner"
      | "renounceOwnership"
      | "saleCount"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionResolve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buySale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNftContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSale",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNftCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftCollectionsWhereTokensOnSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftsCollectionsAuthored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftsCollectionsWhereOwnerOwnsTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContractImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "saleCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "auctionBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buySale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllNftCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftCollectionsWhereTokensOnSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftsCollectionsAuthored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftsCollectionsWhereOwnerOwnsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContractImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AuctionCreated(address,address,uint256,uint256)": EventFragment;
    "AuctionNewBid(address,address,uint256)": EventFragment;
    "AuctionResolved(address,uint256,address)": EventFragment;
    "CommissionReceivedByMarketplace(uint256)": EventFragment;
    "NftBought(address,uint256,address,uint256)": EventFragment;
    "NftContractCreated(address,address)": EventFragment;
    "NftMinted(address,uint256,address,string)": EventFragment;
    "NftOnSale(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SaleCanceled(address,address,uint256)": EventFragment;
    "SaleCreated(address,address,uint256,uint256)": EventFragment;
    "SaleSuccessed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionNewBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionResolved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommissionReceivedByMarketplace"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftOnSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleSuccessed"): EventFragment;
}

export interface AuctionCreatedEventObject {
  author: string;
  contractAddr: string;
  tokenId: BigNumber;
  auctionId: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface AuctionNewBidEventObject {
  nftContractAddress: string;
  bidder: string;
  amount: BigNumber;
}
export type AuctionNewBidEvent = TypedEvent<
  [string, string, BigNumber],
  AuctionNewBidEventObject
>;

export type AuctionNewBidEventFilter = TypedEventFilter<AuctionNewBidEvent>;

export interface AuctionResolvedEventObject {
  nftContractAddress: string;
  tokenId: BigNumber;
  winner: string;
}
export type AuctionResolvedEvent = TypedEvent<
  [string, BigNumber, string],
  AuctionResolvedEventObject
>;

export type AuctionResolvedEventFilter = TypedEventFilter<AuctionResolvedEvent>;

export interface CommissionReceivedByMarketplaceEventObject {
  commission: BigNumber;
}
export type CommissionReceivedByMarketplaceEvent = TypedEvent<
  [BigNumber],
  CommissionReceivedByMarketplaceEventObject
>;

export type CommissionReceivedByMarketplaceEventFilter =
  TypedEventFilter<CommissionReceivedByMarketplaceEvent>;

export interface NftBoughtEventObject {
  nftContractAddress: string;
  tokenId: BigNumber;
  boughtBy: string;
  price: BigNumber;
}
export type NftBoughtEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  NftBoughtEventObject
>;

export type NftBoughtEventFilter = TypedEventFilter<NftBoughtEvent>;

export interface NftContractCreatedEventObject {
  contractAddr: string;
  author: string;
}
export type NftContractCreatedEvent = TypedEvent<
  [string, string],
  NftContractCreatedEventObject
>;

export type NftContractCreatedEventFilter =
  TypedEventFilter<NftContractCreatedEvent>;

export interface NftMintedEventObject {
  nftContractAddress: string;
  tokenId: BigNumber;
  mintedTo: string;
  tokenUri: string;
}
export type NftMintedEvent = TypedEvent<
  [string, BigNumber, string, string],
  NftMintedEventObject
>;

export type NftMintedEventFilter = TypedEventFilter<NftMintedEvent>;

export interface NftOnSaleEventObject {
  nftContractAddress: string;
  tokenId: BigNumber;
  price: BigNumber;
}
export type NftOnSaleEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NftOnSaleEventObject
>;

export type NftOnSaleEventFilter = TypedEventFilter<NftOnSaleEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SaleCanceledEventObject {
  author: string;
  nftContractAddress: string;
  tokenId: BigNumber;
}
export type SaleCanceledEvent = TypedEvent<
  [string, string, BigNumber],
  SaleCanceledEventObject
>;

export type SaleCanceledEventFilter = TypedEventFilter<SaleCanceledEvent>;

export interface SaleCreatedEventObject {
  author: string;
  nftContractAddress: string;
  tokenId: BigNumber;
  price: BigNumber;
}
export type SaleCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SaleCreatedEventObject
>;

export type SaleCreatedEventFilter = TypedEventFilter<SaleCreatedEvent>;

export interface SaleSuccessedEventObject {
  newOwner: string;
  nftContractAddress: string;
  tokenId: BigNumber;
}
export type SaleSuccessedEvent = TypedEvent<
  [string, string, BigNumber],
  SaleSuccessedEventObject
>;

export type SaleSuccessedEventFilter = TypedEventFilter<SaleSuccessedEvent>;

export interface MarketplaceV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    auctionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionResolve(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buySale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelSale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAuction(
      _nftContractAddr: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _startingBid: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNftContract(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSale(
      _nftContractAddr: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllNftCollections(
      overrides?: CallOverrides
    ): Promise<[MarketplaceV2.NftCollectionStructOutput[]]>;

    getAuctionById(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarketplaceV2.AuctionStructOutput]>;

    getNftCollectionsWhereTokensOnSale(
      overrides?: CallOverrides
    ): Promise<[MarketplaceV2.NftCollectionStructOutput[]]>;

    getNftsCollectionsAuthored(
      overrides?: CallOverrides
    ): Promise<[MarketplaceV2.NftCollectionStructOutput[]]>;

    getNftsCollectionsWhereOwnerOwnsTokens(
      overrides?: CallOverrides
    ): Promise<[MarketplaceV2.NftCollectionStructOutput[]]>;

    getSaleById(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarketplaceV2.SaleStructOutput]>;

    nftContractImplementation(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  auctionBid(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

  auctionResolve(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buySale(
    _saleId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelSale(
    _saleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAuction(
    _nftContractAddr: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _startingBid: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNftContract(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSale(
    _nftContractAddr: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllNftCollections(
    overrides?: CallOverrides
  ): Promise<MarketplaceV2.NftCollectionStructOutput[]>;

  getAuctionById(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarketplaceV2.AuctionStructOutput>;

  getNftCollectionsWhereTokensOnSale(
    overrides?: CallOverrides
  ): Promise<MarketplaceV2.NftCollectionStructOutput[]>;

  getNftsCollectionsAuthored(
    overrides?: CallOverrides
  ): Promise<MarketplaceV2.NftCollectionStructOutput[]>;

  getNftsCollectionsWhereOwnerOwnsTokens(
    overrides?: CallOverrides
  ): Promise<MarketplaceV2.NftCollectionStructOutput[]>;

  getSaleById(
    _saleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarketplaceV2.SaleStructOutput>;

  nftContractImplementation(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saleCount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctionBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    auctionResolve(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buySale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createAuction(
      _nftContractAddr: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _startingBid: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNftContract(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createSale(
      _nftContractAddr: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllNftCollections(
      overrides?: CallOverrides
    ): Promise<MarketplaceV2.NftCollectionStructOutput[]>;

    getAuctionById(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarketplaceV2.AuctionStructOutput>;

    getNftCollectionsWhereTokensOnSale(
      overrides?: CallOverrides
    ): Promise<MarketplaceV2.NftCollectionStructOutput[]>;

    getNftsCollectionsAuthored(
      overrides?: CallOverrides
    ): Promise<MarketplaceV2.NftCollectionStructOutput[]>;

    getNftsCollectionsWhereOwnerOwnsTokens(
      overrides?: CallOverrides
    ): Promise<MarketplaceV2.NftCollectionStructOutput[]>;

    getSaleById(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarketplaceV2.SaleStructOutput>;

    nftContractImplementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    saleCount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionCreated(address,address,uint256,uint256)"(
      author?: PromiseOrValue<string> | null,
      contractAddr?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      auctionId?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      author?: PromiseOrValue<string> | null,
      contractAddr?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      auctionId?: null
    ): AuctionCreatedEventFilter;

    "AuctionNewBid(address,address,uint256)"(
      nftContractAddress?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      amount?: null
    ): AuctionNewBidEventFilter;
    AuctionNewBid(
      nftContractAddress?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      amount?: null
    ): AuctionNewBidEventFilter;

    "AuctionResolved(address,uint256,address)"(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null
    ): AuctionResolvedEventFilter;
    AuctionResolved(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null
    ): AuctionResolvedEventFilter;

    "CommissionReceivedByMarketplace(uint256)"(
      commission?: null
    ): CommissionReceivedByMarketplaceEventFilter;
    CommissionReceivedByMarketplace(
      commission?: null
    ): CommissionReceivedByMarketplaceEventFilter;

    "NftBought(address,uint256,address,uint256)"(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      boughtBy?: null,
      price?: null
    ): NftBoughtEventFilter;
    NftBought(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      boughtBy?: null,
      price?: null
    ): NftBoughtEventFilter;

    "NftContractCreated(address,address)"(
      contractAddr?: PromiseOrValue<string> | null,
      author?: PromiseOrValue<string> | null
    ): NftContractCreatedEventFilter;
    NftContractCreated(
      contractAddr?: PromiseOrValue<string> | null,
      author?: PromiseOrValue<string> | null
    ): NftContractCreatedEventFilter;

    "NftMinted(address,uint256,address,string)"(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      mintedTo?: PromiseOrValue<string> | null,
      tokenUri?: null
    ): NftMintedEventFilter;
    NftMinted(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      mintedTo?: PromiseOrValue<string> | null,
      tokenUri?: null
    ): NftMintedEventFilter;

    "NftOnSale(address,uint256,uint256)"(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): NftOnSaleEventFilter;
    NftOnSale(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): NftOnSaleEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SaleCanceled(address,address,uint256)"(
      author?: PromiseOrValue<string> | null,
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): SaleCanceledEventFilter;
    SaleCanceled(
      author?: PromiseOrValue<string> | null,
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): SaleCanceledEventFilter;

    "SaleCreated(address,address,uint256,uint256)"(
      author?: PromiseOrValue<string> | null,
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): SaleCreatedEventFilter;
    SaleCreated(
      author?: PromiseOrValue<string> | null,
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): SaleCreatedEventFilter;

    "SaleSuccessed(address,address,uint256)"(
      newOwner?: PromiseOrValue<string> | null,
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): SaleSuccessedEventFilter;
    SaleSuccessed(
      newOwner?: PromiseOrValue<string> | null,
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): SaleSuccessedEventFilter;
  };

  estimateGas: {
    auctionBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    auctionResolve(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buySale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelSale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAuction(
      _nftContractAddr: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _startingBid: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNftContract(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSale(
      _nftContractAddr: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllNftCollections(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionById(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftCollectionsWhereTokensOnSale(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftsCollectionsAuthored(overrides?: CallOverrides): Promise<BigNumber>;

    getNftsCollectionsWhereOwnerOwnsTokens(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleById(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftContractImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saleCount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    auctionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionResolve(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buySale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelSale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAuction(
      _nftContractAddr: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _startingBid: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNftContract(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSale(
      _nftContractAddr: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllNftCollections(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionById(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftCollectionsWhereTokensOnSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftsCollectionsAuthored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftsCollectionsWhereOwnerOwnsTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleById(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftContractImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
